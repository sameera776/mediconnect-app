{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Uday Sameera\\\\OneDrive\\\\Desktop\\\\MediConnect_JS\\\\frontend\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport MedicineSearch from \"./MedicineSearch\";\nimport { jwtDecode } from \"jwt-decode\";\nimport MapView from \"./MapView\";\nimport AdminInventory from \"./AdminInventory\"; // ✅ Import admin component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dashboard() {\n  _s();\n  const [auth, setAuth] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [isAdmin, setIsAdmin] = useState(false); // ✅ State to track admin\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    if (!token) {\n      alert(\"You must be logged in to access the dashboard.\");\n      window.location.href = \"/\";\n    } else {\n      try {\n        const decoded = jwtDecode(token); // ✅ decode JWT\n        const currentTime = Date.now() / 1000;\n        if (decoded.exp < currentTime) {\n          alert(\"Session expired. Please log in again.\");\n          localStorage.removeItem(\"token\");\n          window.location.href = \"/\";\n        } else {\n          setAuth(true);\n          if (decoded.email === \"admin@gmail.com\") {\n            setIsAdmin(true); // ✅ check admin\n          }\n        }\n      } catch (err) {\n        console.error(\"Invalid token\", err);\n        localStorage.removeItem(\"token\");\n        window.location.href = \"/\";\n      }\n    }\n    setLoading(false);\n  }, []);\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    alert(\"Logged out successfully.\");\n    window.location.href = \"/\";\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 12\n    }, this);\n  }\n  return auth ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Welcome to MediConnect Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogout,\n      children: \"Logout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MedicineSearch, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapView, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), isAdmin && /*#__PURE__*/_jsxDEV(AdminInventory, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 19\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this) : null;\n}\n_s(Dashboard, \"wvAdszXwZnYzQrfGX3v0ou5B/1I=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","MedicineSearch","jwtDecode","MapView","AdminInventory","jsxDEV","_jsxDEV","Dashboard","_s","auth","setAuth","loading","setLoading","isAdmin","setIsAdmin","token","localStorage","getItem","alert","window","location","href","decoded","currentTime","Date","now","exp","removeItem","email","err","console","error","handleLogout","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Uday Sameera/OneDrive/Desktop/MediConnect_JS/frontend/src/components/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport MedicineSearch from \"./MedicineSearch\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport MapView from \"./MapView\";\r\nimport AdminInventory from \"./AdminInventory\"; // ✅ Import admin component\r\n\r\nfunction Dashboard() {\r\n  const [auth, setAuth] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isAdmin, setIsAdmin] = useState(false); // ✅ State to track admin\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    if (!token) {\r\n      alert(\"You must be logged in to access the dashboard.\");\r\n      window.location.href = \"/\";\r\n    } else {\r\n      try {\r\n        const decoded = jwtDecode(token); // ✅ decode JWT\r\n        const currentTime = Date.now() / 1000;\r\n\r\n        if (decoded.exp < currentTime) {\r\n          alert(\"Session expired. Please log in again.\");\r\n          localStorage.removeItem(\"token\");\r\n          window.location.href = \"/\";\r\n        } else {\r\n          setAuth(true);\r\n          if (decoded.email === \"admin@gmail.com\") {\r\n            setIsAdmin(true); // ✅ check admin\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Invalid token\", err);\r\n        localStorage.removeItem(\"token\");\r\n        window.location.href = \"/\";\r\n      }\r\n    }\r\n\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    alert(\"Logged out successfully.\");\r\n    window.location.href = \"/\";\r\n  };\r\n\r\n  if (loading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  return auth ? (\r\n    <div>\r\n      <h2>Welcome to MediConnect Dashboard</h2>\r\n      <button onClick={handleLogout}>Logout</button>\r\n      <MedicineSearch />\r\n      <MapView />\r\n      {isAdmin && <AdminInventory />} {/* ✅ Admin features shown here */}\r\n    </div>\r\n  ) : null;\r\n}\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}